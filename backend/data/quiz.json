```json
{
  "quiz_metadata": {
    "subject": "JavaScript Programming",
    "total_questions": 25,
    "estimated_time_minutes": 30,
    "difficulty_distribution": {
      "Easy": 10,
      "Medium": 7,
      "Hard": 8
    }
  },
  "questions": [
    {
      "id": "q1",
      "type": "multiple_choice",
      "difficulty": "Easy",
      "topic": "Basic Syntax and Data Types",
      "subtopic": "Variables and Data Types",
      "question": "Which of the following is a valid variable declaration in JavaScript?",
      "options": ["var x = 10;", "10 = x;", "variable x = 10;", "let = 10;"],
      "correct_answer": "var x = 10;",
      "explanation": "In JavaScript, 'var', 'let', and 'const' are used to declare variables. 'var x = 10;' is a valid declaration."
    },
    {
      "id": "q2",
      "type": "multiple_choice",
      "difficulty": "Easy",
      "topic": "Basic Syntax and Data Types",
      "subtopic": "Operators",
      "question": "What is the result of the expression '5 + 3 * 2'?",
      "options": ["16", "11", "8", "10"],
      "correct_answer": "11",
      "explanation": "According to operator precedence, multiplication is performed before addition: 5 + (3 * 2) = 5 + 6 = 11."
    },
    {
      "id": "q3",
      "type": "true_false",
      "difficulty": "Easy",
      "topic": "Basic Syntax and Data Types",
      "subtopic": "Variables and Data Types",
      "question": "Strings in JavaScript can be enclosed by single quotes only.",
      "correct_answer": "False",
      "explanation": "Strings in JavaScript can be enclosed by single quotes, double quotes, or backticks."
    },
    {
      "id": "q4",
      "type": "multiple_choice",
      "difficulty": "Medium",
      "topic": "Basic Syntax and Data Types",
      "subtopic": "Control Structures",
      "question": "Which control structure is used to execute code based on a condition?",
      "options": ["for loop", "while loop", "if statement", "function"],
      "correct_answer": "if statement",
      "explanation": "'if statements' are used in JavaScript to execute code based on whether a specified condition is true."
    },
    {
      "id": "q5",
      "type": "multiple_choice",
      "difficulty": "Medium",
      "topic": "Functions",
      "subtopic": "Function Declaration and Invocation",
      "question": "Which of the following correctly defines a function in JavaScript?",
      "options": ["function myFunction() {}", "def myFunction() {}", "myFunction() = function {}", "function: myFunction {}"],
      "correct_answer": "function myFunction() {}",
      "explanation": "The correct syntax for declaring a function in JavaScript is 'function functionName() {}'."
    },
    {
      "id": "q6",
      "type": "multiple_choice",
      "difficulty": "Medium",
      "topic": "Functions",
      "subtopic": "Anonymous Functions and Arrow Functions",
      "question": "What is the correct syntax for an arrow function that takes one parameter?",
      "options": ["(x) => x * 2", "=> x * 2", "(x) -> x * 2", "x => x * 2"],
      "correct_answer": "x => x * 2",
      "explanation": "In JavaScript, arrow functions can be written as 'param => expression'."
    },
    {
      "id": "q7",
      "type": "true_false",
      "difficulty": "Medium",
      "topic": "Functions",
      "subtopic": "Higher-Order Functions",
      "question": "A higher-order function can take another function as an argument.",
      "correct_answer": "True",
      "explanation": "Higher-order functions in JavaScript can take other functions as arguments or return them as output."
    },
    {
      "id": "q8",
      "type": "multiple_choice",
      "difficulty": "Hard",
      "topic": "Object-Oriented Programming",
      "subtopic": "Prototypes and Inheritance",
      "question": "What is the prototype chain?",
      "options": [
        "A method to associate objects with their properties",
        "A way to define static methods in JavaScript",
        "A mechanism for inheritance in JavaScript",
        "An array of function calls"
      ],
      "correct_answer": "A mechanism for inheritance in JavaScript",
      "explanation": "The prototype chain is a core feature in JavaScript that allows objects to inherit properties and methods from other objects."
    },
    {
      "id": "q9",
      "type": "true_false",
      "difficulty": "Hard",
      "topic": "Object-Oriented Programming",
      "subtopic": "Classes and ES6 Features",
      "question": "In ES6, a class must use the 'class' keyword to be defined.",
      "correct_answer": "True",
      "explanation": "In ES6, classes are defined using the 'class' keyword, which streamlines the creation of objects and inheritance."
    },
    {
      "id": "q10",
      "type": "short_answer",
      "difficulty": "Easy",
      "topic": "Asynchronous JavaScript",
      "subtopic": "Promises",
      "question": "What is a Promise in JavaScript?",
      "correct_answer": "A Promise is an object that represents the eventual completion or failure of an asynchronous operation and its resulting value.",
      "explanation": ""
    },
    {
      "id": "q11",
      "type": "short_answer",
      "difficulty": "Hard",
      "topic": "Asynchronous JavaScript",
      "subtopic": "Async/Await",
      "question": "Explain the purpose of the async/await syntax in JavaScript.",
      "correct_answer": "The async/await syntax allows developers to write asynchronous code in a more synchronous style, making it easier to read and maintain.",
      "explanation": ""
    },
    {
      "id": "q12",
      "type": "multiple_choice",
      "difficulty": "Medium",
      "topic": "DOM Manipulation",
      "subtopic": "Selecting Elements",
      "question": "Which method selects elements by their ID in the DOM?",
      "options": ["document.getElement()", "document.getElementById()", "document.querySelectorAll()", "document.querySelector()"],
      "correct_answer": "document.getElementById()",
      "explanation": "The 'getElementById' method is specifically designed to select a single element with a specified ID."
    },
    {
      "id": "q13",
      "type": "true_false",
      "difficulty": "Easy",
      "topic": "DOM Manipulation",
      "subtopic": "Event Handling",
      "question": "Event listeners can be added to DOM elements to handle user interactions.",
      "correct_answer": "True",
      "explanation": "Event listeners are used in JavaScript to perform actions when specific events occur on DOM elements."
    },
    {
      "id": "q14",
      "type": "multiple_choice",
      "difficulty": "Medium",
      "topic": "DOM Manipulation",
      "subtopic": "Creating and Removing Elements",
      "question": "What method is used to remove an element from the DOM?",
      "options": ["removeElement()", "deleteElement()", "element.remove()", "element.detach()"],
      "correct_answer": "element.remove()",
      "explanation": "The 'remove()' method is used to remove an element from the DOM."
    },
    {
      "id": "q15",
      "type": "short_answer",
      "difficulty": "Hard",
      "topic": "Advanced Concepts",
      "subtopic": "Closures",
      "question": "What is a closure in JavaScript?",
      "correct_answer": "A closure is a function that retains access to its lexical scope, even when the function is executed outside that scope.",
      "explanation": ""
    },
    {
      "id": "q16",
      "type": "multiple_choice",
      "difficulty": "Hard",
      "topic": "Advanced Concepts",
      "subtopic": "Modules",
      "question": "What is the purpose of modules in JavaScript?",
      "options": [
        "To reduce execution time",
        "To encapsulate code for reuse",
        "To share memory between scripts",
        "To execute code simultaneously"
      ],
      "correct_answer": "To encapsulate code for reuse",
      "explanation": "Modules in JavaScript enable encapsulation, organization, and reuse of code across different parts of an application."
    },
    {
      "id": "q17",
      "type": "true_false",
      "difficulty": "Medium",
      "topic": "Advanced Concepts",
      "subtopic": "Error Handling",
      "question": "The try/catch construct can be used to handle exceptions in JavaScript.",
      "correct_answer": "True",
      "explanation": "Using try/catch allows developers to gracefully handle exceptions that could occur in their code."
    },
    {
      "id": "q18",
      "type": "multiple_choice",
      "difficulty": "Hard",
      "topic": "Asynchronous JavaScript",
      "subtopic": "Event Loop",
      "question": "What is the role of the event loop in JavaScript?",
      "options": [
        "To execute synchronous code faster",
        "To manage asynchronous operations",
        "To handle HTTP requests",
        "To process events in parallel"
      ],
      "correct_answer": "To manage asynchronous operations",
      "explanation": "The event loop allows JavaScript to perform non-blocking I/O operations, handling asynchronous events even within a single-threaded environment."
    },
    {
      "id": "q19",
      "type": "short_answer",
      "difficulty": "Hard",
      "topic": "Advanced Concepts",
      "subtopic": "Error Handling",
      "question": "How does the finally block work in a try/catch statement?",
      "correct_answer": "The finally block executes after the try and catch blocks, regardless of whether an exception was thrown.",
      "explanation": ""
    },
    {
      "id": "q20",
      "type": "short_answer",
      "difficulty": "Medium",
      "topic": "Basic Syntax and Data Types",
      "subtopic": "Operators",
      "question": "What is the difference between === and == in JavaScript?",
      "correct_answer": "The === operator checks for both value and type equality, while == checks for value equality only, performing type coercion if necessary.",
      "explanation": ""
    },
    {
      "id": "q21",
      "type": "multiple_choice",
      "difficulty": "Medium",
      "topic": "Functions",
      "subtopic": "Anonymous Functions and Arrow Functions",
      "question": "What is the difference between an anonymous function and a named function?",
      "options": [
        "Anonymous functions cannot return values.",
        "Named functions can be invoked before their declaration.",
        "Anonymous functions are slower to execute.",
        "There is no difference."
      ],
      "correct_answer": "Named functions can be invoked before their declaration.",
      "explanation": "Named functions are hoisted, meaning they can be called before their definition in the code, while anonymous functions cannot."
    },
    {
      "id": "q22",
      "type": "multiple_choice",
      "difficulty": "Hard",
      "topic": "Object-Oriented Programming",
      "subtopic": "Classes and ES6 Features",
      "question": "Which of the following correctly creates a class in ES6?",
      "options": [
        "class MyClass() {}",
        "class MyClass: {}",
        "class MyClass {}",
        "class MyClass {}()"
      ],
      "correct_answer": "class MyClass {}",
      "explanation": "The correct syntax for defining a class in ES6 requires the use of the 'class' keyword followed by the class name."
    },
    {
      "id": "q23",
      "type": "true_false",
      "difficulty": "Hard",
      "topic": "Advanced Concepts",
      "subtopic": "Closures",
      "question": "Closures can lead to memory leaks if not managed correctly.",
      "correct_answer": "True",
      "explanation": "If closures retain references to outer variables that are no longer needed, it can prevent garbage collection and cause memory leaks."
    },
    {
      "id": "q24",
      "type": "true_false",
      "difficulty": "Medium",
      "topic": "Basic Syntax and Data Types",
      "subtopic": "Variables and Data Types",
      "question": "JavaScript is a statically typed language.",
      "correct_answer": "False",
      "explanation": "JavaScript is dynamically typed, meaning variable types are determined at runtime."
    },
    {
      "id": "q25",
      "type": "short_answer",
      "difficulty": "Hard",
      "topic": "Asynchronous JavaScript",
      "subtopic": "Promises",
      "question": "What are the three states of a Promise in JavaScript?",
      "correct_answer": "The three states of a Promise are pending, fulfilled, and rejected.",
      "explanation": ""
    }
  ]
}
```