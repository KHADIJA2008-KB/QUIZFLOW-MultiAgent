{
  "quiz_results": {
    "user_id": "test_user",
    "quiz_id": "unknown",
    "timestamp": "2025-01-01T12:00:00Z",
    "overall_score": {
      "points_earned": 0,
      "total_points": 25,
      "percentage": 0.0,
      "grade": "F"
    },
    "question_results": [
      {
        "question_id": "q1",
        "user_answer": "",
        "correct_answer": "var x = 10;",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: var x = 10;"
      },
      {
        "question_id": "q2",
        "user_answer": "",
        "correct_answer": "11",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: 11"
      },
      {
        "question_id": "q3",
        "user_answer": "",
        "correct_answer": "False",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: False"
      },
      {
        "question_id": "q4",
        "user_answer": "",
        "correct_answer": "if statement",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: if statement"
      },
      {
        "question_id": "q5",
        "user_answer": "",
        "correct_answer": "function myFunction() {}",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: function myFunction() {}"
      },
      {
        "question_id": "q6",
        "user_answer": "",
        "correct_answer": "x => x * 2",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: x => x * 2"
      },
      {
        "question_id": "q7",
        "user_answer": "",
        "correct_answer": "True",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: True"
      },
      {
        "question_id": "q8",
        "user_answer": "",
        "correct_answer": "A mechanism for inheritance in JavaScript",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: A mechanism for inheritance in JavaScript"
      },
      {
        "question_id": "q9",
        "user_answer": "",
        "correct_answer": "True",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: True"
      },
      {
        "question_id": "q10",
        "user_answer": "",
        "correct_answer": "A Promise is an object that represents the eventual completion or failure of an asynchronous operation and its resulting value.",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: A Promise is an object that represents the eventual completion or failure of an asynchronous operation and its resulting value."
      },
      {
        "question_id": "q11",
        "user_answer": "",
        "correct_answer": "The async/await syntax allows developers to write asynchronous code in a more synchronous style, making it easier to read and maintain.",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: The async/await syntax allows developers to write asynchronous code in a more synchronous style, making it easier to read and maintain."
      },
      {
        "question_id": "q12",
        "user_answer": "",
        "correct_answer": "document.getElementById()",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: document.getElementById()"
      },
      {
        "question_id": "q13",
        "user_answer": "",
        "correct_answer": "True",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: True"
      },
      {
        "question_id": "q14",
        "user_answer": "",
        "correct_answer": "element.remove()",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: element.remove()"
      },
      {
        "question_id": "q15",
        "user_answer": "",
        "correct_answer": "A closure is a function that retains access to its lexical scope, even when the function is executed outside that scope.",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: A closure is a function that retains access to its lexical scope, even when the function is executed outside that scope."
      },
      {
        "question_id": "q16",
        "user_answer": "",
        "correct_answer": "To encapsulate code for reuse",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: To encapsulate code for reuse"
      },
      {
        "question_id": "q17",
        "user_answer": "",
        "correct_answer": "True",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: True"
      },
      {
        "question_id": "q18",
        "user_answer": "",
        "correct_answer": "To manage asynchronous operations",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: To manage asynchronous operations"
      },
      {
        "question_id": "q19",
        "user_answer": "",
        "correct_answer": "The finally block executes after the try and catch blocks, regardless of whether an exception was thrown.",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: The finally block executes after the try and catch blocks, regardless of whether an exception was thrown."
      },
      {
        "question_id": "q20",
        "user_answer": "",
        "correct_answer": "The === operator checks for both value and type equality, while == checks for value equality only, performing type coercion if necessary.",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: The === operator checks for both value and type equality, while == checks for value equality only, performing type coercion if necessary."
      },
      {
        "question_id": "q21",
        "user_answer": "",
        "correct_answer": "Named functions can be invoked before their declaration.",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: Named functions can be invoked before their declaration."
      },
      {
        "question_id": "q22",
        "user_answer": "",
        "correct_answer": "class MyClass {}",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: class MyClass {}"
      },
      {
        "question_id": "q23",
        "user_answer": "",
        "correct_answer": "True",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: True"
      },
      {
        "question_id": "q24",
        "user_answer": "",
        "correct_answer": "False",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: False"
      },
      {
        "question_id": "q25",
        "user_answer": "",
        "correct_answer": "The three states of a Promise are pending, fulfilled, and rejected.",
        "is_correct": false,
        "points_awarded": 0,
        "feedback": "Incorrect. The correct answer is: The three states of a Promise are pending, fulfilled, and rejected."
      }
    ],
    "recommendations": [
      "You scored 0.0%. Keep practicing to improve!",
      "Review the questions you got wrong and study those topics more."
    ]
  }
}